import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;


@SuppressWarnings("serial")
public class MapPanel extends JPanel {
	private static int width = 600;
	private static int height = 300;
	private static int rowCount = 8;
	private static int columnCount = 16;
	private ArrayList<Rectangle> cells = new ArrayList<>(rowCount * columnCount);
	public BufferedImage wallE;

	public MapPanel() 
	{
		//TODO needed staff here?
		setSize(600, 300);
		try {
			wallE = ImageIO.read(new File("src\\walle.jpg"));
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public Dimension getPreferredSize() {
		return new Dimension(width, height);
	}

	@Override
	public void invalidate() {
		//        cells.clear();
		super.invalidate();
	}

	@Override
	protected void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D rectGraphics = (Graphics2D) g.create();

		int cellWidth = width / columnCount;
		int cellHeight = height / rowCount;

		int xOffset = (width - (columnCount * cellWidth)) / 2;//if the grid is not the same size as the panel, this posiotions it to the center
		int yOffset = (height - (rowCount * cellHeight)) / 2;

		if (cells.isEmpty()) {
			for (int row = 0; row < rowCount; row++) {
				for (int col = 0; col < columnCount; col++) {
					int currentWidth = xOffset + (col * cellWidth);
					int currentHeight = yOffset + (row * cellHeight);
					Rectangle cell = new Rectangle(
							currentWidth,
							currentHeight,
							cellWidth,
							cellHeight);
					cells.add(cell);
				}
			}
		}

		rectGraphics.setColor(Color.GRAY);
		for (Rectangle cell : cells) {
			rectGraphics.draw(cell);
		}
		g.drawImage(wallE, xOffset + (8 * cellWidth)+1, yOffset + (6 * cellHeight)+1, null);

		rectGraphics.dispose();
	}

}
