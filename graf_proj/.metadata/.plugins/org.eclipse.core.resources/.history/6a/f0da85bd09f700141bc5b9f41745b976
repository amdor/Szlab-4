import java.lang.Math;

public class Bot extends Machine {
	public boolean isDirectable;
	public int oilCount;//public only for proto testing
	public int puttyCount;//public only for proto testing

	/**
	 * Initializer to be used 
	 * @param ID The ID of the bot
	 * @param speed Initial speed of the Bot
	 * @param startingField The field where the Bot is to be start its life
	 */
	
	public Bot(int id, Field startingField)throws IllegalArgumentException{
		isDirectable = true;
		oilCount = 3;
		puttyCount = 3;
		directVector = new DirectVector();
		if(ID >= 20)
		{
			isDirectable = false;
			throw(new IllegalArgumentException());
		}else {
			this.ID = id;
		}
		//if there's no field or the field is occupied, than it's not good
		if((startingField == null) || !(startingField.addMachineToField(this))){
			throw(new IllegalArgumentException());
		} else {//else field is valid, and now holds our new bot
			this.currentField = startingField;
		}
	}
	
	/**
	 * Initializer to be used 
	 * @param ID The ID of the bot
	 * @param speed Initial speed of the Bot
	 * @param startingField The field where the Bot is to be start its life
	 */
	public Bot(int ID, DirectVector speed, Field startingField) throws IllegalArgumentException {
		isDirectable = true;
		oilCount = 3;
		puttyCount = 3;
		if(ID >= 20)
		{
			isDirectable = false;
			throw(new IllegalArgumentException());
		}else {
			this.ID = ID;
		}
		if(speed == null)
		{
			throw(new IllegalArgumentException());
		} else {
			this.directVector = speed;
		}
		//if there's no field or the field is occupied, than it's not good
		if((startingField == null) || !(startingField.addMachineToField(this))){
			throw(new IllegalArgumentException());
		} else {//else field is valid, and now holds our new bot
			this.currentField = startingField;
		}
		
	}
	
	/**
	 * makes the Bot jump from one Field to another
	 * Calculates the params of getNExtField from the directVector, and current position
	 * @return true if jump was successful, false if it wasn't
	 */
	@Override
	public boolean jump(){
		this.isDirectable = true;
		currentField.removeMachineFromField();
		Field tmp = Map.getNextField(this.currentField, this.directVector);
		this.currentField = tmp;
		//this is the next currentField, where the robot will jump
		if(this.currentField.handleLanding(this)){
			return true;	
		}
		return false;
	}
	
	/**
	 * The function is called when two Bot collides
	 * The collision with small and normal bots are handled differently
	 */
	@Override
	public void collision() {
		if(currentField.getMachineID() < 20)
		{
			if(compareSpeed((Bot)currentField.getMachine()))
			{
				Bot b = (Bot) currentField.getMachine();
				b.averageVector(this);
				//killing this
				directVector.changeDirection(0, 0);
				this.isDirectable = false;
				this.currentField = null;
				this.puttyCount = 0;
				this.oilCount = 0;//dead
			}
			else
			{
//				this.averageVector((Bot) currentField.getMachine());
				// kill the other bot
				Bot otherBot = (Bot)currentField.getMachine();
				currentField.removeMachineFromField();
				otherBot.collision();//since its currentField is still THE currentField
			}
		}
		else if(currentField.getMachineID() > 19)
		{
			currentField.setObstacle(new Oil());
			currentField.setHasOil(true);
			// kill smallBot
			int smallID = currentField.getMachineID();
			currentField.removeMachineFromField();
			for(int i = 0; i < Map.smallBots.size(); i++)
			{
				if(Map.smallBots.get(i).ID == smallID)
				{
					Map.smallBots.remove(i);
					i = Map.smallBots.size() + 1;
				}
			}
			
		}
	}

	/**
	 * Changes the DirectVector if can
	 * @param x	Vertical component of the DirectVector
	 * @param y	Horizontal component of the DirectVector
	 * @return true if succeeds false if not
	 */
		/*x+=directVector.getright();
		y+=directVector.getup();*/
		if(isDirectable)
		{
			directVector.changeDirection(x, y);
		}
		return isDirectable;		
	}
	
	/**
	 * Puts down an oil to the currentField, if the Bot has oil
	 * If oilCount is 0 it can't put down an oil, error message
	 */
	public void putOil(){
		if(this.oilCount > 0){
			this.currentField.setObstacle(new Oil());
			this.currentField.setHasOil(true);
			this.oilCount--;
		}		
	}
	
	/**
	 * Puts down a Putty to the currentField, if the Bot has oil
	 * If puttyCount is 0 it can't put down an oil, error message
	 */
	public void putPutty(){
		if(puttyCount > 0){
			currentField.setObstacle(new Putty());
			this.currentField.setHasPutty(true);
			puttyCount--;
		}
	}
	
	public int getOilCoint(){
		return this.oilCount;
	}
	
	public int getPuttyCount(){
		return this.puttyCount;
	}

	/**
	 * Makes the DirectVector of the Bot the half as it was before
	 */
	public void slowBot(){
		int jobbra = directVector.getright();
		int fel = directVector.getup();
		jobbra=jobbra/2;
		fel=fel/2;
		directVector.changeDirection(jobbra, fel);
//		Skeleton.showInfo("Function called: Bot: slowBot()\nThe DirecVector of the Bot is half as before");
//		Skeleton.showInfo("Function ended: slowBot()");
	}
	
	/**
	 * compares the speed of 2 robots, that collided
	 * @param bot2 this objects speed is compared to this bot2
	 * @return true, if the speed of bot2 is bigger, false otherwise
	 */
	public boolean compareSpeed(Bot bot2){
		double b1 = Math.sqrt((double)this.directVector.getright()*(double)this.directVector.getright() +
				(double)this.directVector.getup()*(double)this.directVector.getup());
		double b2= Math.sqrt(bot2.directVector.getright()*bot2.directVector.getright() +
				bot2.directVector.getup()*bot2.directVector.getup());
		return b2>b1? true : false;
		
	}
	
	public DirectVector getDirectVector(){
		return this.directVector;
	}
	
	/**
	 * calculates the average of the speed of two robots, that collided
	 * @param bot2 the bot whit which the collision happened
	 */
	public void averageVector(Bot bot2){
		int x = (this.directVector.getright() + bot2.directVector.getright())/2;
		int y = (this.directVector.getup() + bot2.directVector.getup())/2;
		directVector.changeDirection(x, y);		
	}
}
